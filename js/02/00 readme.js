/**
 * 00 数组sort方法
 * sort方法用于数值数组排序（底层二分法？)
 * 
 * 01 数组join方法
 * join方法用于将数组连接成一个字符串并以返回值方式返回
 * 
 * 02 字符串的charAt方法
 * 和直接使用数组下标一样，字符串底层一般也就是数组表示
 * 
 * 04 字符串的indexOf方法           demo："helloworld".indexOf('world')
 * 用于寻找字符串片段，并返回start下标
 * lastIndexOf方法为从右到左寻找字符串片段
 * 
 * 05 字符串的substr和substring方法
 * substr和substring都不会对原数组进行影响
 * substr逐渐不使用了
 * 
 * 07 split 
 * 该方法可用于将字符串拆分为数组，当split参数为""空字符串时，即将字符串完全拆分
 * 和join方法起相反作用
 * 
 * 08 toUpperCase和toLowCase
 * 用于将字符串转换大小写
 * 
 * 10 regExp    正则基本书写法:   /使用的是正斜杠/
 * regExp的test方法可用于测试字符串是否符号正则规范
 * regExp.test(str)
 * 
 * 11 使用reg做为字符串的参数
 * 字符串的split方法使用reg做为参数
 * 
 * 字符串的match方法使用reg做为参数，会返回一个对象。对象的0参数是调用该方法的字符串，index参数是匹配到的字符串的起始位置
 * match方法可使用全局匹配的regExp，这样的话会返回一个数组（可能会含有该字符串匹配成功的多个字符串段项）
 * 
 * 字符串的search方法使用reg作为参数
 * search方法返回值是匹配字符串段
 * search方法无法使用reg进行全局匹配。它能做到的事情使用match也能做到，且match能进行全局匹配，可以做得比它更好
 * 值得注意的是：exec也可以完成search可以做到的事,但exec是属于RegExp对象的静态方法
 * 
 * 字符串的replace方法
 * 可以使用reg做为第一个参数，第二个参数为一个字符串，该字符串用来替换n个reg匹配成功的字符串片段
 * 
 * 16 exec具有记忆性
 * 使用exec方法的regExp对象必须设置为全局匹配
 * regExp.exec(str)返回一个同march方法返回值一样的对象
 * 下次使用regExp.exec(str)会从上次该方法匹配成功的字符串之后的位置作为start项
 * 
 * 17 正则字符集
 * [a-zA-Z]匹配到一个字母字符就返回true
 * [^a-zA-Z]       
   【a-z】为匹配到一个字母则为true，【^a-z】为匹配到一个非a-z则为true
   ^起到的非的作用
 * 
 * 18 正则的修饰符 
 * i和g
 * 
 * 19 正则的边界 ^ $
 * ^helloWorld$
 * 
 * 20 正则的量词
 * {3,6} 等价于 大于等于3小于等于6
 * {1,}
 * ?为字符串出现一次或者0次
 * *等价于{0,}
 * +等价于{1,}
 * 
 * 21 预定义类
 * .可以匹配回🚗和换行外的全部字符，\.则是匹配.字符
 * \d匹配数字，\D匹配非数字
 * \s匹配空格字符,\S匹配非空格字符
 * \w匹配a-z A-Z 0-9    \W匹配非
 * 
 * 预定义类
 * . 匹配回车换行
 * d\  \s  \w
 * 
 * 22 中文匹配
 * 中文匹配则是利用中文的utf编码
 * 
 * 
 */

